;; stop welcome screen from displaying
(custom-set-variables '(inhibit-startup-screen t))
(custom-set-faces)

;; adding user custom packages in .emacs.d to load-path
(add-to-list 'load-path "~/.emacs.d/modes/")

;; load yaml mode for .yml and .yaml files
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

;;load markdown mode for .md
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

;; uncomment if want to bind the ENTER key to `newline-and-indent' in yaml-mode
;; (add-hook 'yaml-mode-hook
;;   '(lambda ()
;;     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

;; load cfengine mode for .cf files
(autoload 'cfengine-mode "cfengine" "cfengine editing" t)
;; (add-to-list 'load-path "~/.emacs.d/cfengine")
(add-to-list 'auto-mode-alist '("\\.cf\\'" . cfengine-mode))
					;
;; load org-mode settings for .org files
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

;; create sane keybindings for window splits (duplicated in tmux)
(global-set-key (kbd "C-x |") 'split-window-right)
(global-set-key (kbd "C-x _") 'split-window-below)

;; NOT USED CURRENTLY: stop creating #autosave# files
;; (setq auto-save-default nil)
;; or store auto-save-files in /tmp
;; (setq auto-save-file-name-transforms
;;       `((".*" ,temporary-file-directory t)))

;; move autogenerated backup files (~) into separate directory
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/.file_backups"))    ; don't litter the fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups

;; clean up backup files: purge if older than 1 week
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
	       (> (- current (float-time (fifth (file-attributes file))))
		  week))
      (message "%s" file)
      (delete-file file))))
